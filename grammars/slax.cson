fileTypes: [
  "slax"
]
name: "SLAX"
patterns: [
  {
    begin: "/\\*"
    captures:
      "0":
        name: "comment.block.slax"
    end: "\\*/"
    name: "comment.block.slax"
  }
  {
    match: "(\\/[-a-zA-Z0-9_]+|[-a-zA-Z0-9_]+\\/[-a-zA-Z0-9_]+|\\/[-a-zA-Z0-9_]+\\/[-a-zA-Z0-9_]+)"
    name: "constant.namespace.slax"
  }
  {
    match: "\\b(apply-templates|match|mode|param|priority|var|mvar|version|with|import)\\b"
    name: "keyword.other.slax"
  }
  {
    match: "\\b(call|else|for-each|if|set)\\b"
    name: "keyword.control.slax"
  }
  {
    captures:
      "1":
        name: "keyword.other.slax"
      "2":
        name: "entity.name.function.slax"
      "3":
        name: "variable.parameter.slax"
    match: "^\\s*(template|call)\\s+([-a-zA-Z0-9_:]+)\\s*\\((.*)\\)"
    name: "meta.template.slax"
  }
  {
    match: "^([-a-zA-Z0-9_]+)\\s*(\\([\\$;]*\\))?"
    name: "meta.method.slax"
  }
  {
    begin: "(<)([a-zA-Z0-9:]+)"
    end: "(>)"
    name: "meta.tag.slax"
  }
  {
    begin: "\""
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.slax"
    end: "\""
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.slax"
    name: "string.quoted.double.slax"
    patterns: [
      {
        match: "\\\\."
        name: "constant.character.escape.slax"
      }
    ]
  }
  {
    begin: "'"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.slax"
    end: "'"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.slax"
    name: "string.quoted.single.slax"
    patterns: [
      {
        match: "\\\\."
        name: "constant.character.escape.slax"
      }
    ]
  }
  {
    match: "\\b(copy-of|expr|import|not|ns junos|ns xnm|ns jcs)\\b"
    name: "support.function.slax"
  }
  {
    captures:
      "1":
        name: "variable.other.slax"
      "2":
        name: "markup.underline.link.slax"
    match: "(\\$[-a-zA-Z0-9]+)(\\/[^;){,\\s]+)"
    name: "variable.other.slax"
  }
  {
    begin: "^\\s*var\\s+\\$arguments\\s*\\=\\s*\\{"
    end: "^\\s*\\}"
    name: "variable.language.slax"
  }
  {
    match: "(\\$[-a-zA-Z0-9_]+)"
    name: "variable.other.slax"
  }
  {
    match: "\\b(jcs:[^\\(]+)"
    name: "support.function.slax"
  }
]
scopeName: "source.slax"
